// 1) შემქნეით მასივი და ობიექტი, გამოიყენეთ console table მეთოდი რომ ცხრილის სახით გამოიტანოთ ორივე მონაცემი 
// (აუცილებლად ახსენით კომენტრაებით რა არის მოდული, მოდულარობა, ჩაშენებული მოდულები, 
// გარე მოდულები, გლობალური მოდულები და გამშვები გარემო)

const names = ["Nika", "Luka", "Vano"];

const person = {
    name: "John",
    age: 25
}

console.table(names);
console.table(person);

// module - კონკრეტული დავალების შესასრულებლად დაწერილი კოდი, რომელიც დაექსპორტებულია(გატანილია) ფაილიდან. 
// მისი გამოყენება შეგვიძლია სხვა ფაილში ისე, რომ ჩვენ არ გვიწევს იმის ცოდნა, თუ როგორი კოდისგან შედგება შესაბამისი module.

// მოდულარობა არის კოდის წერის ერთ-ერთი საუკეთესო ტექნიკა, 
// სადაც მთავარი ლოგიკა იყოფა chunk-ებად ანუ ფაილებად, საბოლოოდ კი ხდება მათი გაერთიანება.
// ასე ბევრად მარტივია კოდის წაკითხვა/გააზრება და დებაგინგი

// ჩაშენებული არის module-ი, რომელიც ავტომატურად არის დაინსტალიერებული node.js-ში და ჩვენ მხოლოდ მისი დაიმპორტება გვიწევს გამოსაყენებლად

// გარე არის module-ი, რომელიც არ არის დაინსტალირებული node.js-ში და ჩვენ გვიწევს მათი შექმნა ან კონკრეტული წყაროებიდან დაინსტალირება.
// ამის შემდეგ შეგვიძლია module-ის დაიმპორტება და გამოყენება.

// გლობალური არის module-ი, რომელიც ავტომატურად არის დაინსტალირებული node.js-ში, მაგრამ მისი დაიმპორტება აღარ გვიწევს,
// იგი ასევე ავტომატურად არის დაიმპორტებული.

// გამშვები გარემო არის ადგილი სადაც ეშვება კოდი. JavaScript-ს აქვს ორი გამშვები გარემო, ბრაუზერის ძრავა(V8) და Node.js

// 2) გამოიყენეთ process.argv იუმისათვის რომ ტერმინალიდან დაამატებით 2 არგუმენტი (რიცხვი) შეიტანოთ და შემდეგ შეკრიბეთ 
// (ახსენით კომენტარებით რა არის process, რას გვეუბნება argv, აგრეთვე გამოიყენეთ memoryUsage() მეთოდი პროცესს ობიექტზე 
// ბოლოში რომ გაიგოთ რამდენი მეხსეიერება გამოიყენა პროგრამამ, გამოთვალეთ მეგაბაიტებში მოიძიეთ ინტერნტეში მთვლელი bit -> mb)

console.log(process.argv);

console.log(parseInt(process.argv[2]) + parseInt(process.argv[3]));

// process არის გლობალური ობიექტი node.js-ში, რომელიც გვაწვდის ინფორმაციას და საშუალებას გვაძლევს
// ვაკონტროლოთ ის გარემო, სადაც ჩვენი კოდი სრულდება.

// argv, არის process ობიექტის მასივი, რომელიც გვიბრუნებს node.js-ის გამოძახებისას გადაცემული არგუმენტების სიას.
// მასში ყოველთვის მინიმუმ 2 ელემენტია:
// პირველი - Node.js-ის ბილიკი(მისამართი კომპიუტერში)
// მეორე - იმ ფაილის ბილიკი(მისამართი კომპიუტერში), რომელიც გავუშვით
// დანარჩენი კი, მომხმარებლის მიერ გადაცემული არგუმენტები

console.log(`${(process.memoryUsage().rss / 1048576).toFixed(2)} MB`);