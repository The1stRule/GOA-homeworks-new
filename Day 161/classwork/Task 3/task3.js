// 3) შექმენით ფაილი რომელშიც ჩაწერთ რაიმე დიდ წინადადებას, შემდეგ დააიმპორტეთ  fs მოდული თქვენს script ში, 
// წაიკითხეთ მოცემული ფაილი და წაკითხული მონაცემები გამოიტანეთ console ში (გამოიყენეთ ორივე ტიპის მეთოდი 
// ასინქრონუილიც (readFile)  და სინქრონულიც (readFileSync), შეადარეთ მათი მუშაობა და ახსენით კომენტარებით 
// მათ შორის განსხვავება და რა არის სინქრონული და ასიუქნრონული კოდი)

const fs = require("fs");

fs.readFile("./text.txt", "utf-8", (error, data) => {
    if(error) {
        console.log("Can't read this file:", error);
    } else {
        console.log("File succsesfully read:", data);
    }
})

const data = fs.readFileSync("./text.txt", "utf-8");

console.log(data);

// .readFile არის fs მოდულის მეთოდი, რომელიც გვაძლევს ფაილის წაკითხვის საშუალებას.
// ის არის ასინქრონული მეთოდი, რომელსაც სამი არგუმენტი გადაეცემა:
// 1) ფაილის მისამართი, რომელსაც წაიკითხავს
// 2) ენკოდირების ფორმატი(ეს ამიხსენი უკეთ)
// 3) first error callback ფუნქცია, რომელიც ფაილის წაკითხვის შემდეგ ავტომატურად გამოიძახება

// .readFileSync არის .readFile-ის მსგავსი მეთოდი, მათ შორის მხოლოდ სამი განსხვავებაა - readFileSync არის სინქრონული მეთიდი, 
// მას არ გადაეცემა first error callback ფუნქცია და ის აბრუნებს წაკითხულ მონაცემს, რომლის შენახვაც მაგალითად ცვლადში შეგვიძლია.
// მისი გამოყენება კარგია, როდესაც საჭიროა კოდის შესრულება მხოლოდ წაკითხვის შემდეგ.

// სინქრონული არის კოდი, რომლის შესრულებისას შემდეგი კოდი არ ეშვება მანამ, სანამ მიმდინარე მოქმედება არ დასრულდება.
// ასინქრონული არის კოდი, რომელიც იწყებს მოქმედებას და მის პარალელურად სხვა კოდი აგრძელებს შესრულებას, 
// ხოლო ასინქრონული მოქმედება ფონურად მიმდინარეობს და გარკვეული დრო სჭირდება დასასრულებლად.