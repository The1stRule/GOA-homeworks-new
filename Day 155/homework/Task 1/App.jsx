import { useState } from "react";
import MyText from "./components/MyText.jsx";

// 3) შექმენით React - ის პროექტი, უნდა გქონდეთ კომპონენტი სახელად MyText რომელსაც გამოაქვს ტექსტი მაგალითად Hello From React, 
// ამ კომპონენტზე გამოიყენეთ memo, App კომპონენტში შექმენით მდგომარეობა სახელად count - ი, უნდა გქონდეთ ერთი ღილაკი მასზე დაჭერისას 
// უნდა შეიცვალოს რიცხვის (შექმნილი მდგომარეობის) მნიშვნელობა, App კომპონენტში გამოიძახეთ MyText კომპონენტი, ასევე პარაგრაფის დახმარებით 
// გამოიტანეთ რიცხვის მნიშვნელობა რომელიც ყოველ დაკლიკებაზე იცვლება, memo - ს დახმარებით როცა რიცხვი ღილაკზე 
// დაჭერისას იცვლება MyText კომპონენტი თავიდან არ რენდერდება

const App = () => {
    const [count, setCount] = useState(0);
    return (
        <>

            <MyText />
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>+1</button>
        </>
    );
}

export default App;

// კომენტარების სახით ახსენით თუ რა არის memo

// memo არის React-ის ობიექტის მეთოდი, რომელიც გვაძლევს საშუალებას თავიდან ავიცილოთ კომპონენტის რასაჭირო დარენდერება
// კომპონენტის დარენდერებას იწვევს:
// 1) კომპონენტის პირველი დარენდერება
// 2) კომპონენტის props-ის შეცვლა
// 3) კომპონენტში მდგომარეობის შეცვლა
// 4) მშობელი კომპონენტის დარენდერება

// ჩამოთვლილთაგან მე-4 მიზეზის გამო, ხშირ შემთხვევაში კომპონენტის დარენდერება ხდება უმიზეზოდ. 
// არაა საჭირო, მშობელი კომპონენტის თავიდან დარენდერებამ, შვილი კომპონენტიც თავიდან დაარენდეროს, 
// თუ რათქმაუნდა მისი props-ი ან რომელიმე მდგომარეობა არ შეიცვალა.

// memo მეთოდს გადაეცემა არგუმენტად კომპონენტი, რომელსაც ის უკეთებს მემოიზაციას, 
// ანუ გადაცემულ კომპონენტს იქამდე არ დაარენდერებს, სანამ მისი props-ი ან მდგომარეობა არ შეიცვლება